
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: add_menu_element.m4scp
// Description: File contains procedure to append 
//				command into noatom command
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich, Sergei Startsev, Sergei Zalivako, Olga Savelieva
//        Date: 05.12.11

#include "scp_keynodes.scsy"
#include "etc_questions.scsy"
#include "com_keynodes.scsy"
#include "ui_keynodes.scsy"
#include "meta_info.scsy"
#include "lib_search.scsy"

procedure(add_child_command,
[[	
	search_bin_pair_begin_proc;
	nrel_decomposition;
	stype_sheaf;
	ui_atom_command;
	ui_noatom_command;
	ui_question_command;
	1_;
	2_;
]],
[{
	parent, decomp, node, child,
	arc, arc1,
	handler, element, segment, t_seg
}],
{[
	1_: in_: parent,	//#	parent command
	2_: in_: child	//# child command
]}
)

sys_get_location([1_: fixed_: parent, 2_: assign_: segment])	
sys_spin_segment([1_: fixed_: segment, 2_: assign_: t_seg])
sys_set_default_segment([1_: fixed_: segment])

/////////////////////////////////////////////////////
// Trying to search decomposition relation pair for parent command
callReturn([
	1_:	fixed_: search_bin_pair_begin_proc,
	2_:	fixed_: {[
			1_: fixed_: parent,
			2_: fixed_: nrel_decomposition,
			3_: assign_: decomp
		]}
	]
)

/////////////////////////////////////////////////////
// Generation decomposition relation pair for parent command
// if this pair does not exist
ifVarAssign([1_: decomp], no_gen_decomp)

genElStr3([
	1_: fixed_: nrel_decomposition,
	2_: assign_: arc_: pos_: const_: arc,
	3_: assign_: node_: const_: node
])

genElStr3([
	1_: fixed_: stype_sheaf,
	2_: assign_: arc_: pos_: const_: arc,
	3_: fixed_: node
])
genElStr5([
	1_: fixed_: node,
	2_: assign_: arc_: pos_: const_: arc,
	3_: assign_: node_: const_: decomp,
	4_: assign_: arc_: pos_: const_: arc1,
	5_: fixed_: 1_
])
genElStr5([
	1_: fixed_: node,
	2_: assign_: arc_: pos_: const_: arc,
	3_: fixed_: parent,
	4_: assign_: arc_: pos_: const_: arc1,
	5_: fixed_: 2_
])
label(no_gen_decomp)

/////////////////////////////////////////////////////
// Erasing all command accessories for parent command
eraseElStr3([
	1_: fixed_: ui_atom_command,
	2_: f_: assign_: arc_: const_: pos_: arc,
	3_: fixed_: parent
])

eraseElStr3([
	1_: fixed_: ui_noatom_command,
	2_: f_: assign_: arc_: const_: pos_: arc,
	3_: fixed_: parent
])

/////////////////////////////////////////////////////
// Setting command accessory for parent command
genElStr3([
	1_: fixed_: ui_noatom_command,
	2_: assign_: arc_: const_: pos_: arc,
	3_: fixed_: parent
])

/////////////////////////////////////////////////////
// Adding append child command into parent
genElStr3([
	1_: fixed_: decomp,
	2_: assign_: arc_: pos_: const_: arc,
	3_: fixed_: child
])

label(exit)
return()
end()