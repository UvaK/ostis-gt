
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: all_input.m4scp
// Description: File contains procedure to find
//				all input pairs to specified element
/////////////////////////////////////////////////////
// 		Author: Denis Koronchik
//        Date: 28.11.10


#include "scp_keynodes.scsy"
#include "ui_keynodes.scsy"
#include "lib_segment.scsy"
#include "lib_set.scsy"

/*!
	Procedure to find all input arcs for specified element
	
	@result	Result contains all input positive arcs with begin elements
*/
procedure(all_input_pos_arcs,
[[	
	segment_open;	// procedure for segment opening
	set_merge;		// procedure for merging two sets
]],
[{
	// input params
	element,
	// output params
	result,
	// other variables
	segment, t_seg, e1, e2
}],
{[
	1_: in_: element,	// element to search all input positive arcs
	2_: in_: result	// all founded elements will be append into this set (set must be existing)
]}
)

// trying to get segment, where element locate
sys_get_location([1_: fixed_: element, 2_: assign_: segment])
sys_spin_segment([1_: fixed_: segment, 2_: assign_: t_seg])

/* need to set segment that contains result node as default to generate answer in it */
sys_get_location([1_: fixed_: result, 2_: assign_: segment])	
sys_open_segment([1_: fixed_: segment])
sys_set_default_segment([1_: fixed_: segment])

searchSetStr3([1_: assign_: e1,
               2_: assign_: arc_: pos_: e2,
               3_: fixed_: element,
			   set1_: set2_: fixed_: result,
              ])
	  
//! FIXME: close segment and erase t_seg

return()
end()