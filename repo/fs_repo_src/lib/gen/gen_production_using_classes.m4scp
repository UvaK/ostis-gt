
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: gen_production_using_classes.m4scp
// Description:
// Файл содержит процедуру запуска операции
// продукции с ипспользованием классов, в которые
// входит указанный объект 
// 1-й аргумент - исходный объект
// 2-й аргумент - узел, обозначающий результат
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 11.01.11

#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "lib_search.scsy"
#include "lib_gen.scsy"

procedure(gen_production_using_classes,
[[	
	search_bin_pair_begin_proc;
	nrel_statements_about_class;
	gen_production_for_impl;
	rrel_answer_is_present;
	gen_production_for_eq;
	q_calculation;
	q_postorder_tree_search;
	nrel_impl;
	nrel_eq;
]],
[{	
	value,arc,seg,segments,temp,arc1,
	classes,class,stat,elem,result
}],
{[
	1_: in_: value,
	2_: out_: result
]}
)
sys_get_location([1_: value,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])

searchSetStr3([
	1_: assign_: const_: node_: temp,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: value,
	set1_: assign_: classes
],,exit)

label(next_class)
ifVarAssign([1_: class],,no_erase_class)
eraseElStr3([
	1_: fixed_: classes,
	2_: assign_: f_: arc,
	3_: fixed_: class
])
label(no_erase_class)
searchElStr3([
	1_: fixed_: classes,
	2_: assign_: const_: pos_: arc,
	3_: assign_: class
],,exit)

//#printNl([1_: /"CLASS"/])
//#printEl([1_: class])

callReturn([
	1_: fixed_: search_bin_pair_begin_proc,
	2_: fixed_:
		{[
			1_: fixed_: class,
			2_: fixed_: nrel_statements_about_class,
			3_: assign_: temp
		]}
])

ifVarAssign([1_: temp],,next_class)
//#printNl([1_: /"TEMP"/])
//#printEl([1_: temp])
/////////////////////////////////////////////////////
//Looking throught all statements about current class
searchSetStr3([
	1_: fixed_: temp,
	2_: assign_: const_: pos_: arc,
	3_: assign_: arc1,
	set3_: assign_: stat
])
label(next_elem)
ifVarAssign([1_: elem],,no_erase_elem)
eraseElStr3([
	1_: fixed_: stat,
	2_: assign_: f_: arc,
	3_: fixed_: elem
])
label(no_erase_elem)
/////////////////////////////////////////////////////
//elem is a sign of current statement
searchElStr3([
	1_: fixed_: stat,
	2_: assign_: const_: pos_: arc,
	3_: assign_: elem
],,next_class)
//#printEl([1_: elem])
searchElStr3([
	1_: fixed_: nrel_impl,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: elem
],,no_impl)

callReturn([
	1_: fixed_: gen_production_for_impl,
	2_: fixed_:
		{[
			1_: fixed_: elem,
			2_: fixed_: value,
			3_: assign_: temp
		]}
])

ifVarAssign([1_: temp],gen_good_result,next_elem)

label(no_impl)

searchElStr3([
	1_: fixed_: nrel_eq,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: elem
],,next_elem)

callReturn([
	1_: fixed_: gen_production_for_eq,
	2_: fixed_:
		{[
			1_: fixed_: elem,
			2_: fixed_: value,
			3_: assign_: temp
		]}
])

ifVarAssign([1_: temp],gen_good_result,next_elem)

label(gen_good_result)
printNl([1_: /"GPUC GGA"/])
genEl([1_: assign_: node_: result])

label(exit)
return()
end