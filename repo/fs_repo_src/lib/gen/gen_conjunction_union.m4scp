
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: gen_conjunction_union.m4scp
// Description:
// Файл содержит процедуру генерации объединения множеств,
// являющихся элеменатми конъюнкитивной связки
// 1-й аргумент - узел, являющийся знаком связки конъюнкции
// 2-й аргумент - узел, обозначающий результат объединения
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 11.01.11
#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "ordinal.scsy"

procedure(gen_conjunction_union,
[[
	nrel_conj;
]],
[{	
	input_set,output_set,set,set2,arc,arc1,elem,seg,segments,temp,node
}],
{[
	1_: in_: input_set,
	2_: out_: output_set
]}
)
sys_get_location([1_: input_set,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])
printNl([1_: /"GCU"/])
searchElStr3([
	1_: fixed_: nrel_conj,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: input_set
],,is_not_conj)
genEl([1_: assign_: const_: node_: output_set])
searchSetStr3([
	1_: fixed_: input_set,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: temp,
	set3_: assign_: set
])
label(next_elem)
ifVarAssign([1_: elem],,no_erase_elem)
eraseElStr3([
	1_: fixed_: set,
	2_: assign_: pos_: const_: f_: arc,
	3_: fixed_: elem
])
label(no_erase_elem)
searchElStr3([
	1_: fixed_: set,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node_: const_: elem
],,exit)
/////////////////////////////////////////////////////
//  Inside cycle
searchSetStr3([
	1_: fixed_: elem,
	2_: assign_: const_: pos_: arc,
	3_: assign_: temp,
	set3_: assign_: set2
],,next_elem)
label(next_node)
ifVarAssign([1_: node],,no_erase_node)
eraseElStr3([
	1_: fixed_: set2,
	2_: assign_: pos_: const_: f_: arc,
	3_: fixed_: node
])
label(no_erase_node)
searchElStr3([
	1_: fixed_: set2,
	2_: assign_: const_: pos_: arc,
	3_: assign_: node
],,next_elem)
genElStr3([
	1_: fixed_: output_set,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: node
],next_node,next_node)
label(is_not_conj)
varAssign([1_: output_set, 2_: input_set])

label(exit)
printNl([1_: /"OUTPUT_SET"/])
printEl([1_: output_set])
return()
end