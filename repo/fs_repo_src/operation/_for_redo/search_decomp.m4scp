
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/*
Операция поиска декомпозиции
Условие инициализации:

Автор: Житко Владимир Александрович
Дата: 22 мая 2010
*/


#include "scp_keynodes.scsy"
#include "ui_keynodes.scsy"

procedure(search_decomp_ckeck,
[[
	k_question = "/seb/lingvistic/поиск декомпозиции";
	ge = "/seb/planimetry/Геометрия Евклида";
	concept1 = "/seb/planimetry/понятие";
	concept2 = "/seb/planimetry/теория";
]],
[{
	question, result,
	arc1, node1
}],
{[
	1_: in_: question,
	2_: out_: result
]}
)
printNl([ 1_: /"Check operation DECOMP"/])

searchElStr3([
	1_: fixed_: k_question,
	2_: assign_: arc_: pos_: const_: arc1,
	3_: fixed_: question
	],,is_not_my)

searchElStr3([
	1_: fixed_: question,
	2_: assign_: arc_: pos_: const_: arc1,
	3_: assign_: node_: const_: node1
	],,is_not_my)
	
searchElStr3([
	1_: fixed_: concept1,
	2_: assign_: arc_: pos_: const_: arc1,
	3_: fixed_: node1
	],is_my)
	
searchElStr3([
	1_: fixed_: concept2,
	2_: assign_: arc_: pos_: const_: arc1,
	3_: fixed_: node1
	],is_my)
	
nop(is_not_my)
	
label(is_my)
	
varAssign([1_: assign_: result, 2_: node1])
printNl([ 1_: /"OK"/])

label(is_not_my)

return()
end

procedure(search_decomp_oper,
[[
	f_search = "/operation/search_decomp/search_decomp";
]],
[{
	input, result_set
}],
{[
	1_: in_: input,
	2_: out_: result_set
]}
)

printNl([ 1_: /"Run operation"/])

genEl([1_: assign_: node_: const_: result_set])

callReturn([
	1_: fixed_: f_search,
	2_: fixed_: {[
		1_: input,
		2_: result_set
	]}
], e)

printNl([ 1_: /"End operation"/])

return()
end

procedure(search_decomp_ui,
[[
	f_search = "/operation/search_decomp/search_decomp";
	ui_Output;		// процедура вывода конструкций пользователю
]],
[{
	wnd, selected_el, sheet, shift, 
	arc, target, result_set, e, answer_reciever
}],
{[
	1_: in_: selected_el,
	2_: in_: sheet,
	3_: in_: answer_reciever
]}
)
//# Получение целевого объекта
searchElStr3([
	1_: fixed_: selected_el,
	2_: assign_: arc_: pos_: const_: arc,
	3_: assign_: node_: target
	])
	
genEl([
	1_: assign_: node_: const_: result_set
	])

callReturn([
	1_: fixed_: f_search,
	2_: fixed_: {[
		1_: fixed_: target,
		2_: fixed_: result_set
		]}
	], e)

callReturn([ 
	1_: fixed_: ui_Output,
	2_: fixed_: {[
		1_: answer_reciever,
		2_: result_set
	]}
	])

return()
end


procedure(search_decomp,
[[	
	decompozition = "/seb/planimetry/декомпозиция*";
	main_semantic = "/operation/search_semantic/binrel_by_target_rel";
]],
[{
	target, result_set,
	e, 
	node1, node2, 
	arc1, arc2, arc3, 
	set1, set2	
}],
{[
	1_: in_: target,
	2_: in_: out_: result_set
]}
)
	genEl([
		1_: assign_: node_: const_: result_set
		])

	genEl([1_: assign_: node_: const_: node1])
	genEl([1_: assign_: node_: const_: node2])
	
	callReturn([ 
		1_: fixed_: main_semantic,
		2_: fixed_: {[
			1_: target,
			2_: decompozition,
			3_: result_set,
			4_: node1,
			5_: node2
		]}
		], e)
return()
end