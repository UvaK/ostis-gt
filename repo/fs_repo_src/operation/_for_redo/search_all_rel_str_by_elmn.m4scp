
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/


#include "scp_keynodes.scsy"
#include "ui_keynodes.scsy"

procedure(search_all_rel_str_by_elmn_ui,
[[
	f_search = "/operation/search_all_rel_str_by_elmn/search_all_rel_str_by_elmn";
]],
[{
	wnd, selected_el, sheet, shift, 
	arc, target, result_set, e, answer_reciever
}],
{[
	1_: in_: selected_el,
	2_: in_: sheet,
	3_: in_: answer_reciever
]}
)
//# Получение целевого объекта
searchElStr3([
	1_: fixed_: selected_el,
	2_: assign_: arc_: pos_: const_: arc,
	3_: assign_: node_: target
	])
	
genEl([
	1_: assign_: node_: const_: result_set
	])

callReturn([
	1_: fixed_: f_search,
	2_: fixed_: {[
		1_: fixed_: target,
		2_: fixed_: result_set,
		3_: fixed_: answer_reciever
		]}
	], e)

return()
end


procedure(search_all_rel_str_by_elmn,
[[	
	f_local_binrel_by_cheaf = "/operation/search_semantic/binrel_by_cheaf";
	ui_Output;		// процедура вывода конструкций пользователю
]],
[{
	target, result_set, answer_reciever,
	e, 
	node1, node2, node3,
	arc1, arc2, arc3, 
	set1, set2,
	x1, x2, x3
}],
{[
	1_: in_: target,
	2_: in_: out_: result_set,
	3_: in_: answer_reciever
]}
)

genEl([1_: assign_: node_: const_: x1])
genEl([1_: assign_: node_: const_: x2])
genEl([1_: assign_: node_: const_: x3])
	
genEl([1_: assign_: node_: const_: set1])
	
searchSetStr5([
	1_: assign_: node_: const_: node1,
	2_: assign_: arc_: pos_: const_: arc1,
	3_: fixed_: target,
	4_: assign_: arc_: pos_: const_: arc2,
	5_: fixed_: 1_,
	set1_: fixed_: set1
	])
	
searchSetStr5([
	1_: assign_: node_: const_: node1,
	2_: assign_: arc_: pos_: const_: arc1,
	3_: fixed_: target,
	4_: assign_: arc_: pos_: const_: arc2,
	5_: fixed_: 2_,
	set1_: fixed_: set1
	])
		
label(beg_search)

	genEl([1_: assign_: node_: const_: result_set])

	searchElStr3([
		1_: fixed_: set1,
		2_: assign_: arc_: pos_: const_: arc1,
		3_: assign_: node_: const_: node1
		],,end_search)
		
	eraseEl([1_: fixed_: arc1])
	
	callReturn([
	1_: fixed_: f_local_binrel_by_cheaf,
	2_: fixed_: {[
		1_: node1,
		2_: result_set,
		3_: x1,
		4_: x2,
		5_: x3
		]}
	], e)
	
	callReturn([ 
	1_: fixed_: ui_Output,
	2_: fixed_: {[
		1_: answer_reciever,
		2_: result_set
	]}
	],beg_search)

label(end_search	)

return()
end