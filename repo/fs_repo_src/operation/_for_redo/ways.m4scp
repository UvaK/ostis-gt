
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/


///////////////////////////////////////////
//	На входе из ТМа принимает 2 выделенных узла.
//	Ищет между ними миним. путь, ограничиваясь областью "треугольники"
//
#include "scp_keynodes.scsy"
#include "ui_keynodes.scsy"
//#include "../seb/planimetry.scsy"
//#include "include/meta_info.scsy"

procedure(way_triangle,
[[
	sheet_title =c= /"Связь понятий в разделе QAP"/;
	layout =c= /"logical2"/;
	start_msg      = /"...way_triangle begin...\n"/;
	end_msg	       = /"...way_triangle end...\n"/;  
	SCsSheet = "/proc/agents/shell/keynode/SCgSheet";
	countway = "/operation/graph/way";
	"треугольники";
	"QAP";
	ui_Output;		// процедура вывода конструкций пользователю
]],

[{
	terms,
	termin_in,
	arc,
	input,
	descr,
	sheet, graph, src, dest,e1,e2, result,
	graph_nodes,
	answer_reciever
}],
{[
	1_: in_: termin_in,
	2_: in_: answer_reciever		//	получатель ответа (окно, содержимое и т.д.)
]}
)

searchElStr3([1_: fixed_: termin_in, 2_: assign_: e1, 3_: assign_: src], , end_waytr)
eraseEl([1_: fixed_: e1 ], ,)
searchElStr3([1_: fixed_: termin_in, 2_: assign_: e1, 3_: assign_: dest], , end_waytr)
eraseEl([1_: fixed_: e1 ], ,)

genEl([1_: node_: const_: result])
callReturn([1_: fixed_: countway,
            2_: fixed_: {[1_: src, 2_: dest, 3_: "QAP", 4_: result]}
           ])


//#ui_sheet_create([ 1_:  assign_: sheet,
//#	          2_:  fixed_: SCsSheet,
//#	          3_:  fixed_: sheet_title,
//#	          4_:  fixed_: layout
//#	          ])

//#ui_output([1_: fixed_: sheet, 2_: fixed_: result])
callReturn([ 
	1_: fixed_: ui_Output,
	2_: fixed_: {[
		1_: answer_reciever,
		2_: result
	]}
])

label(end_waytr)
return()
end
